from dotenv import load_dotenv
import os
load_dotenv()
from crewai.tools import BaseTool
import requests

class RealTimeSearchTool(BaseTool):
    name: str = "Generic Travel Information Lookup"
    description: str = "Fetches comprehensive travel information based on queries generated by the LLM using the Perplexity API"
    api_key: str = os.getenv('PERPLEXITY_API_KEY')

    def _run(self, query: str) -> str:
        try:
            url = "https://api.perplexity.ai/chat/completions"
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.api_key}"
            }

            data = {
                "model": "sonar-pro",
                "messages": [
                    {"role": "system", "content": "You are a senior travel research expert providing detailed, personalized guides."},
                    {"role": "user", "content": query}
                ],
                "max_tokens": 1000,
                "temperature": 0.2,
                "top_p": 0.9,
                "return_citations": 0,
                "search_domain_filter": ["perplexity.ai"],
                "return_images": 0,
                "return_related_questions": 0,
                "search_recency_filter": "month",
                "stream": 0,
                "presence_penalty": 0,
                "frequency_penalty": 1
            }

            response = requests.post(url, headers=headers, json=data)
            response.raise_for_status()
            response_data = response.json()

            if response_data.get("choices"):
                return response_data["choices"][0]["message"]["content"]
            else:
                return "No comprehensive travel information available for the provided query."

        except requests.RequestException as e:
            return f"Error fetching data from Perplexity API: {str(e)}"
        except Exception as ex:
            return f"An unexpected error occurred: {str(ex)}"
